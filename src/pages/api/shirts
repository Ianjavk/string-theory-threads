import { Client } from "square"

const squareClient = new Client({
  accessToken: EAAAlx4L0dXkuVKzftZm3CtmeTimrOSHojBy9z_6a_oGoyZtDpqdI_6ZKApaL0eu,
  environment: process.env.NODE_ENV === "production" ? "production" : "sandbox",
})

export default async function handler(req, res) {
  console.log("API Request received:", req.method)

  if (req.method !== "GET") {
    console.log("Invalid method:", req.method)
    return res.status(405).json({ message: "Method not allowed" })
  }

  try {
    console.log("Fetching catalog items from Square...")
    const { result } = await squareClient.catalogApi.searchCatalogItems({
      categoryIds: ["YOUR_TSHIRT_CATEGORY_ID"],
      productTypes: ["REGULAR"],
    })

    console.log("Square API response:", {
      itemCount: result.items?.length || 0,
      items: result.items,
    })

    // Transform the Square data into our format
    const products = result.items.map((item) => ({
      id: item.id,
      name: item.itemData.name,
      description: item.itemData.description || "",
      price:
        item.itemData.variations[0].itemVariationData.priceMoney.amount / 100,
      imageUrl: item.itemData.imageIds
        ? `https://items-images-production.s3.us-west-2.amazonaws.com/${item.itemData.imageIds[0]}`
        : "/placeholder-tshirt.jpg",
      variations: item.itemData.variations.map((variation) => ({
        id: variation.id,
        name: variation.itemVariationData.name,
        price: variation.itemVariationData.priceMoney.amount / 100,
        sku: variation.itemVariationData.sku || null,
      })),
    }))

    console.log("Transformed products:", products)
    res.status(200).json(products)
  } catch (error) {
    console.error("Square API Error:", {
      message: error.message,
      code: error.code,
      stack: error.stack,
    })
    res.status(500).json({ message: "Failed to fetch products" })
  }
}
